//===============================================================
// @file:     GroundControl_V0.3
// @brief:    Communication CubeSat - Ground Control
//
// @authors:  Adrian Setka, Immanuel Weule
//
// @hardware: ESP32-DevKitC V4 (ESP32-WROOM-32U)
// @comments: Can only connect to 2,4 GHz, not to 5 GHz
//
// @date:     2021-07-03
//===============================================================



//===============================================================
// Header files, variable declarations and WiFi setup
//===============================================================

#include <Arduino.h>

#include <WiFi.h>
#include <AsyncTCP.h>
#include <SPIFFS.h>

#include <ESPAsyncWebServer.h>
#include <ESPmDNS.h>  // for URL/name instead of IP address
#include <analogWrite.h>

#include "index.h"  // web page header file

int counter = 0; // counter for checking connection status in loop

AsyncWebServer server(80);  // setup a HTTP server

//Set WiFi SSID and password
const char* ssid = "Kewwin_02"; // WiFi SSID
const char* password = "2214934027604276"; // WiFi password

const char* PARAM_COMMAND = "inCommand"; // variable for commandline
const char* PARAM_INIT = "inInit"; // variable for initilization

const int Analog_Pin = 34;  // analog Channel Pin for Website send test
const int LED_Pin = 27; // test LED Pin for Website Receiver test

const char* http_username = "admin";  // username for login
const char* http_password = "admin";  // password for login

//===============================================================
// Function declarations
//===============================================================

void ConnectToWiFi() {
  Serial.println("Connecting to ");
  Serial.print(ssid); // print IP adress of ESP on console
  
  WiFi.disconnect();
  WiFi.begin(ssid, password); // for ESP as a station; for ESP as a AP use "WiFi.softAP(ssid, password)"

  // wait for WiFi to connect
  while(WiFi.waitForConnectResult() != WL_CONNECTED){      
      Serial.print(".");
  }
    
  // if connection is successful show IP address in serial monitor
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP()); // IP address assigned to your ESP

  return;
}

void notFound(AsyncWebServerRequest *request) {
  request->send(404, "text/plain", "Not found");
}

String readFile(fs::FS &fs, const char * path){
  Serial.printf("Reading file: %s\r\n", path);
  File file = fs.open(path, "r");
  if(!file || file.isDirectory()){
    Serial.println("- empty file or failed to open file");
    return String();
  }
  Serial.println("- read from file:");
  String fileContent;
  while(file.available()){
    fileContent+=String((char)file.read());
  }
  file.close();
  Serial.println(fileContent);
  return fileContent;
}

void writeFile(fs::FS &fs, const char * path, const char * message){
  Serial.printf("Writing file: %s\r\n", path);
  File file = fs.open(path, "w");
  if(!file){
    Serial.println("- failed to open file for writing");
    return;
  }
  if(file.print(message)){
    Serial.println("- file written");
  } else {
    Serial.println("- write failed");
  }
  file.close();
}

String processor(const String& var){
  //Serial.println(var);
  if(var == "inCommand"){
    return readFile(SPIFFS, "/inCommand.txt");
  }
  else if(var == "inInit"){
    return readFile(SPIFFS, "/inInit.txt");
  }
  else if(var == "inTest"){
    return readFile(SPIFFS, "/inTest.txt");
  }
  return String();
}

//===============================================================
// Test Functions
//===============================================================

void TestReceiver() {
  String s;
  if( s == "rightCommand") {
    analogWrite(LED_Pin, 255);
    delay(5000);
    analogWrite(LED_Pin, LOW);
  }
  return;
}

//===============================================================
// Setup
//===============================================================

void setup(void){
  
  Serial.begin(115200); // open a serial connection
  Serial.println("Booting...");

  // initialize SPIFFS
  if(!SPIFFS.begin(true)){
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }

  // initialize how ESP should act - AP or STA (comment out one initialization)
  //WiFi.mode(WIFI_AP); // access point mode: stations can connect to the ESP
  WiFi.mode(WIFI_STA); // station mode: the ESP connects to an access point

  ConnectToWiFi();

  if(!MDNS.begin("cubesat")) {  // argument of MDNS.begin holds website name (".local" has to be added)
     Serial.println("Error starting mDNS");
     return;
  }
  // route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    if(!request->authenticate(http_username, http_password))
      return request->requestAuthentication();
    request->send_P(200, "text/html", index_html, processor);
  });
  
  // send a GET request to <ESP_IP>/get?inputString=<inputMessage>
  server.on("/get", HTTP_GET, [] (AsyncWebServerRequest *request) {
    if(!request->authenticate(http_username, http_password))
      return request->requestAuthentication();
    String inputMessage;
    // GET inputString value on <ESP_IP>/get?inputString=<inputMessage>
    if (request->hasParam(PARAM_COMMAND)) {
      inputMessage = request->getParam(PARAM_COMMAND)->value();
      writeFile(SPIFFS, "/inCommand.txt", inputMessage.c_str());
    }
    // GET inputInt value on <ESP_IP>/get?inputInt=<inputMessage>
    else if (request->hasParam(PARAM_INIT)) {
      inputMessage = request->getParam(PARAM_INIT)->value();
      writeFile(SPIFFS, "/inInit.txt", inputMessage.c_str());
    }
    else {
      inputMessage = "No message sent";
    }
    Serial.println(inputMessage);
    request->send(200, "text/text", inputMessage);
  });

  // to get update of ADC Value only
  server.on("/readADC", [] (AsyncWebServerRequest *request) {
     if(!request->authenticate(http_username, http_password))
      return request->requestAuthentication();
     int a = analogRead(Analog_Pin);
     String adcValue = String(a);
     writeFile(SPIFFS, "/inInit.txt", adcValue.c_str());
     request->send(200, "text/plane", adcValue);
  });
  
  server.onNotFound(notFound);
  server.begin();
}


//===============================================================
// Loop
//===============================================================

void loop(void){

  // check if ESP is still connected to WiFi and reconnect if connection was lost
  if(counter>6) { // dont check connection status in every loop (for better runtime)
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("WiFi not connected. Try to reconnect...");
      ConnectToWiFi();
    }
    counter=0;
  } else {
    counter++;
  }
  
  // to access your stored values on inCommand, inInit
  String yourInputCommand = readFile(SPIFFS, "/inCommand.txt");
  Serial.print("*** Your inputCommand: ");
  Serial.println(yourInputCommand);
  
  String yourInputInit = readFile(SPIFFS, "/inInit.txt");
  Serial.print("*** Your inputInit: ");
  Serial.println(yourInputInit);
  
  delay(5000);
}
